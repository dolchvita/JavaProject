안녕하십니까
두 번째 개인 프로젝트 발표를 진행할 류예서입니다.

저의 이번 독립행형 프로그램 주제는 포스기 입니다.
터치스크린 기반의 키오스크가 아닌 소매점에서 현금위주로
계산하고 처리할 때 사용하는 그런 포스기라는 점 강조드리면서
발표 시작해보도록 하겠습니다.

/
이 프로젝트에서 목표로 하는 부분은 
판매할 상품을 직접 등록하고 판매하는 데 필요한 작업을 하는 것입니다.
제가 만든 프로그램은 관리자 전용이기 때문에 관리자 입장에서
운영관리 및 업무에 필요한 기능들을 위주로 구안해보자 하였습니다.,
/
첫 화면은 로그인화면입니다.
관리자 하나의 아이디로만 사용이 되기 때문에
회원가입 없이 로그인 창만 있고,
로그인 기능을 담당하는 디비가 존재하게 됩니다.

처음 화면이 뜨면 모든 버튼에 기능을 막고
경고 메시지를 띄우도록 했구요, 이 부분은 시연과 같이 보여드리겠습니다.
( )
이게 제 화면이고 위부분은 페인트 컴포넌트로 사진과 글씨를 그렸습니다.
화면에도 로그인기능이 필요한 서비스입니다 라고 씌어져 있고,
보시다시피 버튼에 기능을 막았습니다.

로그인 정보가 DB에 들어있는 값과 같으면 권한을 풀어서
멘트도 사라지고
제품등록할 수 있는 페이지로 넘어갈 수 있게 하였습니다.

그리고 환경설정에서 로그인 정보를 수정할 수 있도록했습니다.
로그인 정보를 수정을 하면 수정된 데이터로 접근할 수 있습니다.

/-/
여기 보시면 메뉴들은 전부 라벨로 되어있는데
해당페이지에 불빛이 들어와 있습니다.
라벨에 배경색을 적용하려면 setBackground를 하고 따로 setOpaque의 값을 true로 두어야 한다는
특징이 있었습니다.
/
그래서 페이지 showHide하듯이 메뉴를 overRoll할 수 있는 메서드를 만들어서
커스텀 라벨들이 생성될때 부여되는 순번을 넘기고, 해당 라벨의 색상만 YEllow로 두었습니다.


사실 별 생각없이 이렇게 코드 짜다가 막판에 이 오버롤 효과에 꽂혀가지고
 라벨 리스트를 지우고 커스텀화 하였는데, 리팩토링으로 코드도 정돈되고, 
디자인도 나아져서 좋았습니다.
( )
첫 화면은 지금 저장되어 있는 제품을 전체적으로 보여주는 것입니다.
일단, 제품 등록이 먼저이기 때문에 입력창부터 소개해드리겠습니다.


자료입력은 여기 메뉴바의 첫 번째 버튼에서 구매자료를 눌러주면
이렇게 창이 따로 뜹니다.


// RegistMain
여기가 이제 중요한 구매자료입력 페이지 입니다.

먼저 가이드 디자인부터 보여드리면,

메인 프레임에 코드가 너무 길어지는 것을 방지하기 위해 각각의 패널을 분리하여
메인을 멤버로 갖고 있는 최상위 패널이 각각의 패널들을 상속하도록 하였습니다.

/
이 페이지에서 제품들을 총 담당하여 관리하게 됩니다.
일단 두 개의 테이블이 공존할 수 있도록 하였고,
각각 디비의 데이터들을 표현하고 있습니다.
상위 테이블이 거래처를 맡게 됩니다.
거래처를 먼저 선택을 하고 그 밑에 하위 테이블로 상품들을 입력할 수 있도록
구성을 하였습니다.

( )
그래서 보시면 서로 다른 테이블이 두개가 있구요,
콤보박스로 거레처를 먼저 선택하도록 하였습니다.
레이저헤븐, 블랙라인, 알콩 이렇게 3곳이 있구요.

밑에 상품을 입력하는 공간에 거래처 이름이 선택되어 입력되고,
밑에 상품명과 가격 그리고 바코드를 입력해줍니다.
여기 밑에 있는 정보는 이제 하위테이블의 데이터가 됩니다.
/
상품같은 경우에는 종류당 한장씩 배포되는 게 아니라
보통 같은 상품이 여러건으로 입고가 되잖아요,
그렇기 때문에 각각의 상품들을 관리하기에 
보다 뚜렷한 고유값이 있어야 한다고 생각을 했습니다.

그런데 거래처당 입고되는 상품의 종류도 여러개이고,
 거래처가 다르더라도 비슷한 종류의 옷들도 있고 해서,
이름으로 분리하기에는 애매하기 때문에
각각의 상품에 바코드를 부여해서 관리하는 게 가장 확실한 방법이라고 생각을 했습니다.

그래서 상품입력할 때 foreign keyk나 primary key 외에 바코드를 입력을 했습니다.

( )
등록버튼을 누르면 등록이 되는 것을 확인할 수 있고,
테이블 선택시 해당 상세정보가 텍스트필드에 출력되기 때문에 수정, 삭제 기능까지
간편하게 해결할 수 있고,

이 상태에서 다시 제품 등록하고 싶으면 상품 버튼 누르시면 reset되시고,
거래처 선택해서 거래처버튼 누르면 입력이 됩니다.

이렇게 기본적인 CRUD 작업을 담당하도록 하였습니다.
여기 보이시는 버튼들은 패널의 레이아웃을 그리드로 적용해서 반복문으로 부착했습니다.

지금까지 입력된 상품 수나 금액을 확인하려면 여기 조회버튼을 클릭해주시면 됩니다
/

추가적인 기능으로 여기 저장과 발행버튼이 있는데
이거는 이제 이 표의 상태로 보고하거나 따로 저장해둘 수도 있기 때문에
엑셀 파일로 저장할 수 있도록 해서, 이렇게 관리할 수 있도록 했습니다
지정된 디렉토리에 저장이 된 것을 확인할 수 있구요,

그리고 여기 취소버튼을 누르면 방금 입력한 엑셀 디렉토리로 다시 들어가서
선택한 파일을 삭제할 수 있도록 구현을 하였습니다.
/
이거는 엑셀 기능 구현하면서 정리해놓은 내용인데 엑셀의 셀을 하나하나
생성해서 값을 부여하고 그것을 스트림으로 옮겨 복사를 하는데, 
그 과정이 우리가 dto를 만들어서 테이블모델을 구성하는 것과 비슷하다고 느껴져서
제가 공부하면서 그렸던 아키텍처를 첨부해보았습니다. 
이렇게 이해하면 좋을 것 같다고 생각했습니다.

( )
그리고 지금까지 입력되고 있는 제품의 수와 금액을 조회할 수 있는 칸을 만들어서
조회 버튼을 누르면 테이블의 레코드 수를 세어주고, 입력된 금액을 모두 더해서 출력되게 하였습니다.
/
테이블의 속성을 이용해서 간편하게 조회기능을 구성할 수 있었습니다.

( )
지금 보여드린 자료입력 페이지는 보시다시피 프레임을 따로 두었습니다.
왜냐하면, 구매자료들은 같은 상품일지라도 이렇게 낱개로 하나하나 따로 출력이 되는데,
이렇게 되면 각 상품들이 총 몇개 씩 들어왔는지 한눈에 알아보기엔 구독성이 낮기 때문에
재고 페이지를 따로 두어서 같이 조회 들어가면서 보다 편리하게 관리할 수 있게 하기 위함입니다.


// 3. 재고페이지
이 페이지를 프레임으로 따로 만든 이유는 여기 보이시는 재고화면을 같이 볼 수 있게 하기 위함입니다
자료입력은 자료 하나하나를 따로 관리할 수 있도록 낱개로 출력되는 반면에,

/
여기 있는 테이블은 상품이 등록된 하위 테이블의 구성 요소를 살짝 바꾸었습니다.
보시다시피 같은 상품끼리 goup by로 정렬을 묶었고,
Count 함수를 사용해서 개수를 구한 다음에 alias로 구해진 값을 표시했습니다.

재고 페이지에는 같은 상품끼리 묶어서 총 재고수를 보여준다는 차이점이 있기 때문에
어느 상품이 몇개 있는지 따로 새지 않아도 바로 실시간 반영이 되기 때문에 편리하게 관리할 수 있도록 하였습니다.

그리고 상품등록 페이지의 값을 변경한 다음에 여기 있는 동기화 버튼을 누르면
실시간 반영으로 같은 상품의 목록을 보여주고 있기 떄문에
요약된 형식으로 함께 확인할 수 있습니다.



// 4. 포스 페이지
다음은 포스 페이지입니다. 
디자인은 역시 전체 컨테이너는 보더로 적용해서 각각의 커스텀 패널들을 북쪽 동쪽에 붙였고
센터영역은 플로우로 두어 상품 입력시 패널들이 나란히 부착될 수 있도록 하였고
동쪽 영역에 버튼들이 많이 붙어야 하기 때문에 이 부분은 역시 그리드로 레이아웃으로 정하였습니다.

역시나 메인 페이지에는 많은 양의 코드를 두지 않고
각 패널들의 역할을 분리해서 작성하였습니다.
디자인이 많이 들어갔음에도 처음부터 이렇게 나누니까 확실히 
구분하기 편리하여 효율성이 좋았습니다.

( )
먼저 판매 상태는 이쪽이 제 브랜드인데, 파란불과 함께 판매라고 적혀 있고
판매를 다 진행하고 정산 버튼을 클릭하면 로고가 빨간색으로 변하고 중지라고 글씨가 바뀝니다.
아직 판매한 게 없기 때문에 정산 페이지는 깨끗한 상태입니다.
판매를 해야되니까 다시 판매로 바꾸고요,

여기가 이제 바코드 입력창입니다.
 여기서 잠깐 제가 설명 드리기에 앞서서 잠시 보여드릴 게 있어서 카메라를 키겠습니다.
여기 이렇게 제가 바코드들을 직접 스크랩 한 것이구요.
여기 바코드리더기 기계가 있습니다. 참고해주세요.
다시 화면으로 돌아가겠습니다.

앞서 보여드린 바코드를 리더기로 읽으면
이렇게 해당 상품이 출력됩니다.

위에 표시되는 재고 수 보다 많이 상품을 입력하면
재고가 없다는 경고창이 뜨게 됩니다.

/
이 기능을 구현하는 데 고민을 많이 하였는데,

여기 한 페이지에 출력된 상품들 즉 DTO들은 출력된 수많큼 ArrayList에 담기게 되는데,
여러 상품이 섞여 들어가기 때문에 구분을 해서 수를 세야 한다는 특징이 있었습니다.

이럴때 바코드를 활용을 한 것이죠.
담긴 각각의 DTO의 바코드값이랑 텍스트필드에 입력된 바코드가 같을 때만 증가시키고
그 값을 반환받아서 위에 출력중인 이 카운드 함수에 의한 수보다 적을 때까지 탄생시키고
넘어서면 경고창을 띄웠습니다.

( )
상품이 탄생되면서 여기 계산액에 값이 자동으로 누적이 됩니다
받은 돈을 입력하면 되는데,
계산하기 누르면 계산 후 잔액을 보여줍니다.
만약에 받을 금액보다 적은 수를 입력하면 금액이 부족하다는 창이 뜹니다.

그리고 입력중인 전체 내용을 취소하고 싶으면 취소 버튼 누르면 됩니다.
 
판매를 진행하면 출력된 상품들이 그대로 정산페이지에 저장이 됩니다.
정산을 확인하면 해당 상품들이 들어가있는 것을 볼 수 있습니다.

이 곳도 마감을 진행하기 전까지 데이터들이 저장되어야 하기 때문에
DB에 따로 저장을 해 두었는데, 상품테이블에 있는 내용들을 가져와야 해서
하위 테이블로 만드려 했으나,
판매가 진행되면 상품의 데이터는 사라져야 하기 때문에
데이터 무결성이 일어나게 되어서 모순에 빠졌습니다.

따라서 자식테이블로 갈 수 없고 정산용 DB를 만들었습니다.
상품이 판매가 되면 판매된 상품명과 판매금액이 정산테이블에 입력이 됩니다.
( )
그리고 하루가 마무리가 되면,
마감을 하는데, 마감을 하면 지금까지 저장되어있던 정산테이블의
모든 내역이 지워집니다.

여기 있었던 내역은 모두 합계 처리되어서 보고서 칸에 가보시면 오늘의 날짜로
들어와있는 것을 확인할 수 있습니다.

/
이 테이블에서 구한 합계랑 판매 개수를 더해서 토탈레코드 디비에 전달하고
delete된다.

( )
마지막으로 고객관리입니다.
고객관리는 어쩌다보니 로그인메인 화면에서 구현을 하게 되었는데요,

여기 홍보하기 버튼을 누르면
제가 앞서 입력을 해놓았던 광고글이 출력이 됩니다.
이것을 참고해서 고객들에게 스팸문자를 날릴 것입니다.

고객을 누르면,
처음에는 관리자용 화면이라는 것을 표시하기 위해 핑크색으로 지정을 하였고
그 다음에 출력되는 메세지 창들은 고객을 의미하는 노란색으로 지정을 하였습니다.
그래서 각각 서버 연결 해주고
제가 메시지를 입력해서 전송을 하면 브로드캐스팅으로 모두에게 출력되는 방식을
멀티 네트워크를 구현해보았습니다.
/
쓰레드를 관리자용과 고객용으로 두 개를 만들어서 
서버소켓들을 생성시마다 백터 담고 여러 클라이언트 소켓들과
각각 연동될 수 있도록 네트워크 기능을 구현해보았습니다.
/
그리고 홍보에 담겨진 글도 그냥 가져오는 것보다 제이슨 라이브러리를 사용하면
좋겠다 싶어서 홍보라는 key값으로 내용을 직접 작성하였습니다.
이것을 열면 파싱되어서 텍스트AREA에 제가 Value값이 출력됩니다.

/

이렇게 제가 구현한 기능을 모두 보여드렸습니다!
정리하면, 제가 설계한 데이터베이스는 총 5개이구요,
이러한 형태로 관계도가 구성되어있습니다.

/
느낀점은 우선 저번과 동일하게
그동안 수업했던 내용들을 최대한 활용해서 혼자 힘으로 프로그램을 만들어보는 데에
취지를 두었구요,
디비설계부터 디비에 저장될 상품, 그리고 이 프로그램이 운영되는 데 필요한
모든 기능에 대해서 직접 가공해서 만든다는 점이 가장 인상적이었고,
그만큼 손수 배우게 되기 때문에 이게 스탠다드가 아닐까 생각이 들었습니다.

신기했던 점은 프로그램 구성 계획이나 기능 구현에 대해서 선생님께 따로
말씀드리거나 물어보지 않았는데도, 그동안 알려주신 것과 더불어 수업 하신 내용들이
시기적절하게 제가 고민하던 부분을 해결하는 데 너무 도움이 되었습니다.

alias를 디티오 조건에 추가해서 테이블 구성을 다르게 하거나,
 order by로 정렬을 다르게 두는 것, 그리고 간단한 산수문제 등등을
수업시간에 알려주셔가지고 그때 바로 써먹을 수 있었거든요.
활용도 높은 코드 위주로 가르쳐 주셔서 너무 신기하고 좋았습니다.


프로젝트 하면서 그동안 배웠던 부분을 단단하게 다질 수 있는 시간이었던 것 같아서
좋았고, 앞으로 웹 수업도 기대 많이 하겠습니다. 감사합니다.











